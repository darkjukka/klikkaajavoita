{"ast":null,"code":"import _classCallCheck from \"F:\\\\React\\\\testiapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\React\\\\testiapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\React\\\\testiapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\React\\\\testiapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\React\\\\testiapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"F:\\\\React\\\\testiapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"F:\\\\React\\\\testiapp\\\\src\\\\Game.js\";\nimport React, { Component } from 'react';\n\nfunction Palkinto(props) {\n  var palkintoteksti;\n  var palkinto;\n\n  if (props % 50 === 0) {\n    palkintoteksti = React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    }, \"ISO palkinto!\");\n    palkinto = 1;\n  } else if (props % 20 === 0) {\n    palkintoteksti = React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, \"Keskikokoinen palkinto!\");\n    palkinto = 1;\n  } else if (props % 10 === 0) {\n    palkintoteksti = React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Pieni palkinto!\");\n    palkinto = 1;\n  } else {\n    palkintoteksti = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"Seuraavaan palkintoon \", 10 - props % 10, \" klikkausta\");\n    palkinto = 0;\n  }\n\n  return [palkintoteksti, palkinto];\n}\n\nfunction Listaus(props) {\n  var voittajat = props;\n  var listItems = voittajat.map(function (voittaja, index) {\n    return React.createElement(\"li\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, voittaja);\n  });\n  return React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, listItems);\n}\n\nfunction countEdit(props) {\n  var data = {\n    luku: props,\n    id: '1'\n  };\n  fetch('/count/edit', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(function (response) {\n    if (response.status >= 400) {\n      throw new Error(\"Bad response from server\");\n    }\n\n    return response.json();\n  }).then(function (data) {\n    if (data === \"success\") {\n      this.setState({\n        msg: \"User has been edited.\"\n      });\n    }\n  }).catch(function (err) {\n    console.log(err);\n  });\n}\n\nfunction addWinner(props) {\n  var data = {\n    nimi: props\n  };\n  fetch(\"/users/winner\", {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(function (response) {\n    if (response.status >= 400) {\n      throw new Error(\"Bad response from server\");\n    }\n\n    return response.json();\n  }).then(function (data) {\n    console.log(data);\n\n    if (data == \"success\") {\n      this.setState({\n        msg: \"Thanks for registering\"\n      });\n    }\n  }).catch(function (err) {\n    console.log(err);\n  });\n}\n\nvar Game =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Game, _React$Component);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, props));\n    _this.state = {\n      klikkaus: [],\n      voittajalista: [],\n      voittajat: [],\n      countRequestFailed: false\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch('/users').then(function (res) {\n        return res.json();\n      }).then(function (voittajat) {\n        return _this2.setState({\n          voittajat: voittajat\n        });\n      });\n      this.timerID = setInterval(function () {\n        return _this2.tick();\n      }, 10000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      var _this3 = this;\n\n      fetch('/users').then(function (res) {\n        return res.json();\n      }).then(function (voittajat) {\n        return _this3.setState({\n          voittajat: voittajat\n        });\n      });\n      klikattu = 0;\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      var _this4 = this;\n\n      klikattu = 1;\n      fetch('/count').then(function (response) {\n        console.log(response.status);\n        if (!response.ok) throw new Error(response.status);else if (response.status === 304) throw new Error(response.status);else return response.json();\n      }).then(function (data) {\n        _this4.setState({\n          countRequestFailed: false,\n          klikkaus: data\n        });\n\n        console.log(\"DATA STORED\");\n      }).catch(function (error) {\n        console.log('error: ' + error);\n\n        _this4.setState({\n          countRequestFailed: true\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      /*if(this.state.voittajat.length > 0){\r\n         console.log(this.state.voittajat);\r\n          //lista = Listaus(this.state.voittajat);\r\n      }\r\n      */\n      if (klikattu == 1 && this.state.klikkaus.length > 0 && this.state.countRequestFailed == false) {\n        var luku;\n        luku = this.state.klikkaus[0].luku + 1;\n        console.log(luku);\n        console.log(\"lis√§sin\");\n        palkinnot = Palkinto(luku);\n        countEdit(luku);\n\n        if (palkinnot[1] == 1) {\n          addWinner(this.props.nimi);\n        }\n\n        klikattu = 0;\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, this.props.nimi, palkinnot[0], React.createElement(\"button\", {\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Klikkaa ja voita\"), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Edelliset voittajat:\"), this.state.voittajat.map(function (voittajat) {\n        return React.createElement(\"div\", {\n          key: voittajat.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, voittajat.nimi);\n      }));\n    }\n  }]);\n\n  return Game;\n}(React.Component);\n\nvar palkinnot = [];\nvar klikattu = 0;\nexport default Game;","map":{"version":3,"sources":["F:\\React\\testiapp\\src\\Game.js"],"names":["React","Component","Palkinto","props","palkintoteksti","palkinto","Listaus","voittajat","listItems","map","voittaja","index","countEdit","data","luku","id","fetch","method","headers","body","JSON","stringify","then","response","status","Error","json","setState","msg","catch","err","console","log","addWinner","nimi","Game","state","klikkaus","voittajalista","countRequestFailed","handleClick","bind","res","timerID","setInterval","tick","clearInterval","klikattu","ok","error","length","palkinnot"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nfunction Palkinto (props){\r\n    let palkintoteksti;\r\n    let palkinto;\r\n    if((props%50) === 0){\r\n        palkintoteksti = <h1>ISO palkinto!</h1>;\r\n        palkinto = 1;\r\n      }\r\n      else if((props%20) === 0){\r\n        palkintoteksti = <h1>Keskikokoinen palkinto!</h1>;\r\n        palkinto = 1;\r\n      }\r\n      else if((props%10) === 0){\r\n        palkintoteksti = <h1>Pieni palkinto!</h1>;\r\n        palkinto = 1;\r\n      }\r\n      else{\r\n        palkintoteksti = <p>Seuraavaan palkintoon {10-(props%10)} klikkausta</p>;\r\n        palkinto = 0;\r\n      }\r\n      return [palkintoteksti, palkinto];\r\n}\r\n\r\nfunction Listaus(props) {\r\n    \r\n    const voittajat = props;\r\n    const listItems = voittajat.map((voittaja, index) =>\r\n      <li key={index}>\r\n        {voittaja}\r\n      </li>\r\n    );\r\n    return (\r\n      <ul>{listItems}</ul>\r\n    );\r\n  }\r\n\r\n\r\n  function countEdit(props) {\r\n    var data = {\r\n        luku: props,\r\n        id: '1'\r\n    }\r\n    fetch('/count/edit', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    }).then(function(response) {\r\n        if (response.status >= 400) {\r\n            throw new Error(\"Bad response from server\");\r\n        }\r\n        return response.json();\r\n    }).then(function(data) {\r\n        \r\n        if (data === \"success\") {\r\n            this.setState({\r\n                msg: \"User has been edited.\"\r\n            });\r\n        }\r\n    }).catch(function(err) {\r\n        console.log(err)\r\n    });\r\n  }\r\n\r\n  function addWinner(props){\r\n    var data = {\r\n      nimi: props\r\n  }\r\n  fetch(\"/users/winner\", {\r\n      method: 'POST',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify(data)\r\n  }).then(function(response) {\r\n      if (response.status >= 400) {\r\n        throw new Error(\"Bad response from server\");\r\n      }\r\n      return response.json();\r\n  }).then(function(data) {\r\n      console.log(data)    \r\n      if(data == \"success\"){\r\n         this.setState({msg: \"Thanks for registering\"});  \r\n      }\r\n  }).catch(function(err) {\r\n      console.log(err)\r\n  });\r\n  }\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          klikkaus: [], \r\n          voittajalista: [], \r\n          voittajat: [],\r\n\t\t  countRequestFailed: false\r\n        };\r\n        \r\n      this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('/users')\r\n          .then(res => res.json())\r\n          .then(voittajat => this.setState({ voittajat: voittajat }));\r\n\r\n          this.timerID = setInterval(\r\n            () => this.tick(),\r\n            10000\r\n          );\r\n          \r\n      }\r\n      componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n      }\r\n\r\n      tick() {\r\n        fetch('/users')\r\n          .then(res => res.json())\r\n          .then(voittajat => this.setState({ voittajat: voittajat }));\r\n          klikattu = 0;\r\n          \r\n      }\r\n\r\n  \r\n    handleClick() {\r\n      \r\n          klikattu = 1;\r\n          fetch('/count')\r\n          .then((response) => {\r\n\t\t\t  console.log(response.status);\r\n\t\t\tif(!response.ok) throw new Error(response.status);\r\n\t\t\telse if(response.status === 304) throw new Error(response.status);\r\n            else return response.json();\r\n          })\r\n          .then((data) => {\r\n            this.setState({ countRequestFailed: false, klikkaus: data });\r\n            console.log(\"DATA STORED\");\r\n          })\r\n          .catch((error) => {\r\n            console.log('error: ' + error);\r\n            this.setState({ countRequestFailed: true });\r\n  \t\t});\r\n    }\r\n    \r\n\r\n    \r\n  \r\n    render() {\r\n    \r\n    /*if(this.state.voittajat.length > 0){\r\n       console.log(this.state.voittajat);\r\n        //lista = Listaus(this.state.voittajat);\r\n    }\r\n    */\r\n   \r\n   if(klikattu == 1 && this.state.klikkaus.length > 0 && this.state.countRequestFailed == false){\r\n\t   \r\n    let luku;\r\n    luku = this.state.klikkaus[0].luku+1;\r\n\tconsole.log(luku);\r\n\tconsole.log(\"lis√§sin\");\r\n    palkinnot = Palkinto(luku);\r\n    countEdit(luku);\r\n    if(palkinnot[1] == 1){\r\n      addWinner(this.props.nimi);\r\n    }\r\n    klikattu = 0;\r\n    }\r\n      return (\r\n        <div>\r\n            {this.props.nimi}\r\n        {palkinnot[0]}\r\n        <button onClick={this.handleClick}>\r\n          Klikkaa ja voita\r\n        </button>\r\n        <h1>Edelliset voittajat:</h1>\r\n        {this.state.voittajat.map(voittajat =>\r\n            <div key={voittajat.id}>{voittajat.nimi}</div>\r\n          )}\r\n        </div>\r\n       \r\n        \r\n      );\r\n    \r\n  }\r\n  }\r\n  \r\n  let palkinnot = [];\r\n  let klikattu = 0;\r\n \r\n  \r\n  export default Game;"]},"metadata":{},"sourceType":"module"}